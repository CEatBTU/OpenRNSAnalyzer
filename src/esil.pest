flg_zero = { "$z" }
flg_parity = { "$p" }
flg_carry = { "$c" }
flg_borrow = { "$b" }
flg_sign= { "$s" }
flg_regsize = { "$r" }

op_assign = { "=" }
op_bitassign = { ":=" }
op_assignsignext = { "~=" }
op_signext = { "~" }
op_add = { "+" }
op_sub = { "-" }
op_mul = { "*" }
op_div = { "/" }
op_mod = { "%" }
op_inc = { "++" }
op_dec = { "--" }
op_shiftleft = { "<<" }
op_shiftright = { ">>" }
op_rotleft = { "<<<" }
op_rotright = { ">>>" }
op_arithshiftleft = { "<<<<" }
op_arithshiftright = { ">>>>" }
op_bitand = { "&" }
op_bitor = { "|" }
op_bitxor = { "^" }
op_not = { "!" }
op_eq = { "==" }
op_less = { "<" }
op_lesseq = { "<=" }
op_greater = { ">" }
op_greatereq = { ">=" }
op_addassign = { "+=" }
op_subassign = { "-=" }
op_mulassign = { "*=" }
op_divassign = { "/=" }
op_modassign = { "%=" }
op_incassign = { "++=" }
op_decassign = { "--=" }
op_shiftleftassign = { "<<=" }
op_shiftrightassign = { ">>=" }
op_arithshiftleftassign = { "<<<<=" }
op_arithshiftrightassign = { ">>>>=" }
op_bitandassign = { "&=" }
op_bitorassign = { "|=" }
op_bitxorassign = { "^=" }
op_notassign = { "!=" }
op_syscall = { "$" }
op_instructionaddr = { "$$" }
op_todo = { "TODO" }
op_num = { "NUM" }
op_skip = { "SKIP" }
op_loop = { "LOOP" }
op_break = { "BREAK" }
op_stack = { "STACK" }
op_clear = { "CLEAR" }
op_goto = { "GOTO" }
op_dup = { "DUP" }
op_swap = { "SWAP" }
op_d2i = { "D2I" }
op_i2d = { "I2D" }
op_f2d = { "F2D" }
op_d2f = { "D2F" }
op_feq = { "F==" }
op_fneq = { "F!=" }
op_fless = { "F!<" }
op_flesseq = { "F!<=" }
op_fadd = { "F+" }
op_fsub = { "F-" }
op_fmul = { "F*" }
op_fdiv = { "F/" }
op_ceil = { "CEIL" }
op_floor = { "FLOOR" }
op_round = { "ROUND" }
op_sqrt = { "SQRT" }
op_nan = { "NAN" }
op_assignmem = { "=[]" }
op_assignmem_nonimm = { "=[*]" }
op_assignmem_sized = { "=[" ~ mem_size ~ "]" }
op_load = { "[]" }
op_loadmem_nonimm = { "[*]" }
op_loadmem_sized = { "[" ~ mem_size ~ "]" }

op_addassignmem = { "+=[" ~ mem_size ~ "]" }
op_subassignmem = { "-=[" ~ mem_size ~ "]" }
op_mulassignmem = { "*=[" ~ mem_size ~ "]" }
op_divassignmem = { "/=[" ~ mem_size ~ "]" }

op_incassignmem = { "++=[" ~ mem_size ~ "]" }
op_decassignmem = { "--=[" ~ mem_size ~ "]" }

op_andassignmem = { "&=[" ~ mem_size ~ "]" }
op_orassignmem  = { "|=[" ~ mem_size ~ "]" }
op_xorassignmem = { "^=[" ~ mem_size ~ "]" }

op_shiftleftassignmem  = { "<<=[" ~ mem_size ~ "]" }
op_shiftrightassignmem = { ">>=[" ~ mem_size ~ "]" }

mem_size = { ('0'..'9')+ }

ops = _{ (
  op_addassignmem | op_subassignmem | op_mulassignmem | op_divassignmem |
  op_andassignmem | op_orassignmem | op_xorassignmem |
  op_incassignmem | op_decassignmem |

  op_shiftleftassignmem | op_shiftrightassignmem |

  flg_zero | flg_carry | flg_borrow | flg_parity | flg_regsize | flg_sign |

  op_eq |

  op_bitassign | op_assignsignext |
  op_incassign | op_decassign |
  op_addassign | op_subassign | op_mulassign | op_divassign |
  op_modassign |
  op_arithshiftleftassign | op_arithshiftrightassign |
  op_shiftleftassign | op_shiftrightassign |
  op_bitandassign | op_bitorassign | op_bitxorassign | op_notassign |

  op_assignmem_sized | op_assignmem_nonimm | op_assignmem |
  op_loadmem_sized | op_loadmem_nonimm | op_load |

  op_assign |

  op_signext |
  op_inc | op_dec |
  op_add | op_sub | op_mul | op_div | op_mod |
  op_arithshiftleft | op_arithshiftright |
  op_rotleft | op_rotright |
  op_shiftleft | op_shiftright |

  op_bitand | op_bitor | op_bitxor | op_not |
  op_lesseq | op_less |
  op_greater | op_greatereq |
  op_instructionaddr | op_syscall |

  op_todo | op_num | op_skip | op_loop | op_break | op_stack | op_clear | op_goto | op_dup | op_swap |
  op_d2i | op_i2d | op_f2d | op_d2f |

  op_feq | op_fneq |
  op_flesseq | op_fless |
  op_fadd | op_fsub | op_fmul | op_fdiv |
  op_ceil | op_floor | op_round | op_sqrt | op_nan
)}

number = _{ "-"? ~ (hex_number | dec_number) }
hex_number = { "0x" ~ (('0'..'9') | ('a'..'f') | ('A'..'F'))+ }
dec_number = { ('0'..'9')+ }

others = { ASCII_ALPHANUMERIC+ }

command = _{ (number | ops | others) }
if_branch = { (command | conditional) ~ ("," ~ (command | conditional))* }
else_branch = { (command | conditional) ~ ("," ~ (command | conditional))* }
conditional = { "?{," ~ if_branch ~ ",}" ~ ("{," ~ else_branch ~ ",}")? }

commands = { (command | conditional) ~ ("," ~ (command | conditional))* }

top = _{ (commands | conditional) }
